use rustc_hex::{FromHex,ToHex};

pub type TestResult<T> = Result<T, Box<dyn std::error::Error + Sync + Send>>;

use crate::bls381g2::{
    big::Big,
    fp::FP,
    fp2::FP2,
    ecp::ECP,
    ecp2::ECP2,
    bls381::map_to_curve_g1,bls381::map_to_curve_g1_no_iso,
    bls381::map_to_curve_g2,
    pair
};

trait Deserialize<R: std::io::Read> : Sized {
    fn unserialize(r : &mut R) -> std::io::Result<Self>;
}
struct U256([u8;32]);
impl std::fmt::Display for U256 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.0.to_hex::<String>())
    }
}        
impl<R> Deserialize<R> for U256
where 
    R: std::io::Read,
    Self: Sized 
{
    fn unserialize(r : &mut R) -> std::io::Result<Self> {
        let mut bytes = [0u8;32];
        r.read_exact(&mut bytes[..])?;   // the value
        Ok(U256(bytes))
    }
}
impl U256 {
    pub fn to_big(&self) -> Big {
        Big::frombytes(&self.0[..])
    }
}

impl<R> Deserialize<R> for FP
where 
    R: std::io::Read,
    Self: Sized 
{
    fn unserialize(r : &mut R) -> std::io::Result<Self> {
        let mut bytes = [0u8;48];
        r.read_exact(&mut bytes[..16])?; // zeros
        r.read_exact(&mut bytes[..])?;   // the value
        Ok(FP::new_big(Big::frombytes(&bytes[..])))
    }
}

impl<R> Deserialize<R> for ECP
where 
    R: std::io::Read,
    Self: Sized 
{
    fn unserialize(r : &mut R) -> std::io::Result<Self> {
        let x = FP::unserialize(r)?;
        let y = FP::unserialize(r)?;
        Ok(ECP::new_fps(x,y))
    }
}

impl<R> Deserialize<R> for ECP2
where 
    R: std::io::Read,
    Self: Sized 
{
    fn unserialize(r : &mut R) -> std::io::Result<Self> {
        let x_0 = FP::unserialize(r)?;
        let x_1 = FP::unserialize(r)?;
        let y_0 = FP::unserialize(r)?;
        let y_1 = FP::unserialize(r)?;
        Ok(ECP2::new_fp2s(
            FP2::new_fps(x_0,x_1),
            FP2::new_fps(y_0,y_1)
        ))
    }
}

fn test_bls381_fp_to_g1(input: &[u8], output: &[u8]) -> TestResult<bool>{

    let mut reader = input;
    let input = FP::unserialize(&mut reader)?;

    let mut reader = output;
    let expected = ECP::unserialize(&mut reader)?;

    let result = map_to_curve_g1_no_iso(input);

    Ok(result == expected)
}


fn test_bls381_g1_add(input: &[u8], output: &[u8]) -> TestResult<bool>{

    let mut reader = input;
    let mut lhs = ECP::unserialize(&mut reader)?;
    let rhs = ECP::unserialize(&mut reader)?;

    let mut reader = output;
    let expected = ECP::unserialize(&mut reader)?;

    lhs.add(&rhs);
    Ok(lhs == expected)
}

fn test_bls381_g1_mul(input: &[u8], output: &[u8]) -> TestResult<bool> {

    let mut reader = input;
    let lhs = ECP::unserialize(&mut reader)?;
    let rhs = U256::unserialize(&mut reader)?.to_big();

    let mut reader = output;
    let expected = ECP::unserialize(&mut reader)?;

    let result = lhs.mul(&rhs);
    Ok(result == expected)
}    

fn test_bls381_g2_add(input: &[u8], output: &[u8]) -> TestResult<bool> {
    let mut reader = input;
    let mut lhs = ECP2::unserialize(&mut reader)?;
    let rhs = ECP2::unserialize(&mut reader)?;

    let mut reader = output;
    let expected = ECP2::unserialize(&mut reader)?;

    lhs.add(&rhs);
    Ok(lhs == expected)
}

fn test_bls381_g2_mul(input: &[u8], output: &[u8]) -> TestResult<bool>{
    let mut reader = input;
    let lhs = ECP2::unserialize(&mut reader)?;
    let rhs = U256::unserialize(&mut reader)?.to_big();

    let mut reader = output;
    let expected = ECP2::unserialize(&mut reader)?;

    let result = lhs.mul(&rhs);
    Ok(result == expected)
}

fn test_bls381_pairing(input: &[u8], output: &[u8]) -> TestResult<bool>{
    let mut reader = input;
    
    let mut r = pair::initmp();
    while reader.len() > 0 {
        let g1 = ECP::unserialize(&mut reader)?;
        let g2 = ECP2::unserialize(&mut reader)?;

        pair::another(&mut r, &g2, &g1);
    }

    let mut v = pair::miller(&r);
    v = pair::fexp(&v);
    
    Ok(output[31] == if v.isunity() { 1 } else { 0 })
}

pub fn test_base_bls381_fp_to_g1() {
    let input = "0000000000000000000000000000000014406e5bfb9209256a3820879a29ac2f62d6aca82324bf3ae2aa7d3c54792043bd8c791fccdb080c1a52dc68b8b69350";
    let expected = "000000000000000000000000000000000d7721bcdb7ce1047557776eb2659a444166dc6dd55c7ca6e240e21ae9aa18f529f04ac31d861b54faf3307692545db700000000000000000000000000000000108286acbdf4384f67659a8abe89e712a504cb3ce1cba07a716869025d60d499a00d1da8cdc92958918c222ea93d87f0";

    assert!(test_bls381_fp_to_g1(
        &input.from_hex::<Vec<u8>>().unwrap(), 
        &expected.from_hex::<Vec<u8>>().unwrap()
    ).unwrap());
}


pub fn test_base_bls381_g1_add() {

    let input = "00000000000000000000000000000000117dbe419018f67844f6a5e1b78a1e597283ad7b8ee7ac5e58846f5a5fd68d0da99ce235a91db3ec1cf340fe6b7afcdb0000000000000000000000000000000013316f23de032d25e912ae8dc9b54c8dba1be7cecdbb9d2228d7e8f652011d46be79089dd0a6080a73c82256ce5e4ed2000000000000000000000000000000000441e7f7f96198e4c23bd5eb16f1a7f045dbc8c53219ab2bcea91d3a027e2dfe659feac64905f8b9add7e4bfc91bec2b0000000000000000000000000000000005fc51bb1b40c87cd4292d4b66f8ca5ce4ef9abd2b69d4464b4879064203bda7c9fc3f896a3844ebc713f7bb20951d95";
    let expected  = "0000000000000000000000000000000016b8ab56b45a9294466809b8e858c1ad15ad0d52cfcb62f8f5753dc94cee1de6efaaebce10701e3ec2ecaa9551024ea600000000000000000000000000000000124571eec37c0b1361023188d66ec17c1ec230d31b515e0e81e599ec19e40c8a7c8cdea9735bc3d8b4e37ca7e5dd71f6";

    assert!(test_bls381_g1_add(
        &input.from_hex::<Vec<u8>>().unwrap(), 
        &expected.from_hex::<Vec<u8>>().unwrap()
    ).unwrap());
}

pub fn test_base_bls381_g1_mul() {

    let input = "000000000000000000000000000000000b3a1dfe2d1b62538ed49648cb2a8a1d66bdc4f7a492eee59942ab810a306876a7d49e5ac4c6bb1613866c158ded993e000000000000000000000000000000001300956110f47ca8e2aacb30c948dfd046bf33f69bf54007d76373c5a66019454da45e3cf14ce2b9d53a50c9b4366aa3ac23d04ee3acc757aae6795532ce4c9f34534e506a4d843a26b052a040c79659";
    let expected  = "000000000000000000000000000000001227b7021e9d3dc8bcbf5b346fc503f7f8576965769c5e22bb70056eef03c84b8c80290ae9ce20345770290c55549bce00000000000000000000000000000000188ddbbfb4ad2d34a8d3dc0ec92b70b63caa73ad7dea0cc9740bac2309b4bb11107912bd086379746e9a9bcd26d4db58";

    assert!(test_bls381_g1_mul(
        &input.from_hex::<Vec<u8>>().unwrap(), 
        &expected.from_hex::<Vec<u8>>().unwrap()
    ).unwrap());
}    

pub fn test_base_bls381_g2_add() {
    let input = "00000000000000000000000000000000161c595d151a765c7dee03c9210414cdffab84b9078b4b98f9df09be5ec299b8f6322c692214f00ede97958f235c352b00000000000000000000000000000000106883e0937cb869e579b513bde8f61020fcf26be38f8b98eae3885cedec2e028970415fc653cf10e64727b7f6232e06000000000000000000000000000000000f351a82b733af31af453904874b7ca6252957a1ab51ec7f7b6fff85bbf3331f870a7e72a81594a9930859237e7a154d0000000000000000000000000000000012fcf20d1750901f2cfed64fd362f010ee64fafe9ddab406cc352b65829b929881a50514d53247d1cca7d6995d0bc9b200000000000000000000000000000000148b7dfc21521d79ff817c7a0305f1048851e283be13c07d5c04d28b571d48172838399ba539529e8d037ffd1f7295580000000000000000000000000000000003015abea326c15098f5205a8b2d3cd74d72dac59d60671ca6ef8c9c714ea61ffdacd46d1024b5b4f7e6b3b569fabaf20000000000000000000000000000000011f0c512fe7dc2dd8abdc1d22c2ecd2e7d1b84f8950ab90fc93bf54badf7bb9a9bad8c355d52a5efb110dca891e4cc3d0000000000000000000000000000000019774010814d1d94caf3ecda3ef4f5c5986e966eaf187c32a8a5a4a59452af0849690cf71338193f2d8435819160bcfb";
    let expected = "000000000000000000000000000000000383ab7a17cc57e239e874af3f1aaabba0e64625b848676712f05f56132dbbd1cadfabeb3fe1f461daba3f1720057ddd00000000000000000000000000000000096967e9b3747f1b8e344535eaa0c51e70bc77412bfaa2a7ce76f11f570c9febb8f4227316866a416a50436d098e6f9a000000000000000000000000000000001079452b7519a7b090d668d54c266335b1cdd1080ed867dd17a2476b11c2617da829bf740e51cb7dfd60d73ed02c0c6700000000000000000000000000000000015fc3a972e05cbd9014882cfe6f2f16d0291c403bf28b05056ac625e4f71dfb1295c85d73145ef554614e6eb2d5bf02";

    assert!(test_bls381_g2_add(
        &input.from_hex::<Vec<u8>>().unwrap(), 
        &expected.from_hex::<Vec<u8>>().unwrap()
    ).unwrap());
}

pub fn test_base_bls381_g2_mul() {
    let input =     "00000000000000000000000000000000159da74f15e4c614b418997f81a1b8a3d9eb8dd80d94b5bad664bff271bb0f2d8f3c4ceb947dc6300d5003a2f7d7a829000000000000000000000000000000000cdd4d1d4666f385dd54052cf5c1966328403251bebb29f0d553a9a96b5ade350c8493270e9b5282d8a06f9fa8d7b1d900000000000000000000000000000000189f8d3c94fdaa72cc67a7f93d35f91e22206ff9e97eed9601196c28d45b69c802ae92bcbf582754717b0355e08d37c000000000000000000000000000000000054b0a282610f108fc7f6736b8c22c8778d082bf4b0d0abca5a228198eba6a868910dd5c5c440036968e977955054196b6a9408625b0ca8fcbfb21d34eec2d8e24e9a30d2d3b32d7a37d110b13afbfea";
    let expected = "000000000000000000000000000000000b24adeb2ca184c9646cb39f45e0cf8711e10bf308ddae06519562b0af3b43be44c2fcb90622726f7446ed690551d30e00000000000000000000000000000000069467c3edc19416067f572c51740ba8e0e7380121ade98e38ce26d907a2bf3a4e82af2bd195b6c3b7c9b29218880531000000000000000000000000000000000eb8c90d0727511be53ffcb6f3b144c07983ed4b76d31ab003e45b37c7bc1066910f5e29f5adad5757af979dd0d8351d0000000000000000000000000000000004760f8d814189dcd893949797a3c4f56f2b60964bba3a4fc741e7ead05eb886787b2502fc64b20363eeba44e65d0ca0";

    assert!(test_bls381_g2_mul(
        &input.from_hex::<Vec<u8>>().unwrap(), 
        &expected.from_hex::<Vec<u8>>().unwrap()
    ).unwrap());
}


pub fn test_base_bls381_pairing_2() {
    let input =  "000000000000000000000000000000001478ee0ffebf22708a6ab88855081daba5ee2f279b5a2ee5f5f8aec8f97649c8d5634fec3f8b28ad60981e6f29a091b10000000000000000000000000000000011efaeec0b1a4057b1e0053263afe40158790229c5bfb08062c90a252f59eca36085ab35e4cbc70483d29880c5c2f8c200000000000000000000000000000000196044a5cdbc5300ee837dca745a44379070e9297697f5db28df4a37307cc740abed45cc778a3f4e3b8c9890ab6c3c70000000000000000000000000000000001176f5de6a3577ad67863bd3d9152ab9e8184964c6ac276e95946788f5a76394047580077c0971d874a40d510eb0443e00000000000000000000000000000000147dd55dff69213c5760e8d22b700dd7a9c7c33c434a3be95bd5281b97b464fb934a3dff7c23f3e59c5d8d26faa426bf0000000000000000000000000000000019efcf03ddb0934b0f0dba3569809d5b48b863d50d3be4973b504244414e1e1db56adff51d33265ce102b320c552781f000000000000000000000000000000001478ee0ffebf22708a6ab88855081daba5ee2f279b5a2ee5f5f8aec8f97649c8d5634fec3f8b28ad60981e6f29a091b100000000000000000000000000000000081162fe2e65a642993ba283df9bc8d60bfe495b2dc5623f0467c87bc7570980be2654c8cc8838fb362c677f3a3cb1e900000000000000000000000000000000196044a5cdbc5300ee837dca745a44379070e9297697f5db28df4a37307cc740abed45cc778a3f4e3b8c9890ab6c3c70000000000000000000000000000000001176f5de6a3577ad67863bd3d9152ab9e8184964c6ac276e95946788f5a76394047580077c0971d874a40d510eb0443e00000000000000000000000000000000147dd55dff69213c5760e8d22b700dd7a9c7c33c434a3be95bd5281b97b464fb934a3dff7c23f3e59c5d8d26faa426bf0000000000000000000000000000000019efcf03ddb0934b0f0dba3569809d5b48b863d50d3be4973b504244414e1e1db56adff51d33265ce102b320c552781f";
    let expected =  "0000000000000000000000000000000000000000000000000000000000000001";

    assert!(test_bls381_pairing(
        &input.from_hex::<Vec<u8>>().unwrap(),
        &expected.from_hex::<Vec<u8>>().unwrap(),
    ).unwrap());
}

pub fn test_base_bls381_pairing_4() {
    let input =  "0000000000000000000000000000000008d8c4a16fb9d8800cce987c0eadbb6b3b005c213d44ecb5adeed713bae79d606041406df26169c35df63cf972c94be10000000000000000000000000000000011bc8afe71676e6730702a46ef817060249cd06cd82e6981085012ff6d013aa4470ba3a2c71e13ef653e1e223d1ccfe90000000000000000000000000000000013a3de1d25380c44ca06321151e89ca22210926c1cd4e3c1a9c3aa6c709ab5fdd00f8df19243ce058bc753ccf03424ed000000000000000000000000000000001657dbebf712cbda6f15d1d387c87b3fb9b386d5d754135049728a2a856ba2944c741024131a93c78655fdb7bfe3c80300000000000000000000000000000000068edef3169c58920509ed4e7069229bd8038a45d2ce5773451cc18b396d2838c9539ecb52298a27eebd714afacb907c0000000000000000000000000000000004c5346765a62f2d2e700aadccf747acb3322c250435ce2cf358c08f1e286427cabace052327c4b30135c8482c5c0eb90000000000000000000000000000000008d8c4a16fb9d8800cce987c0eadbb6b3b005c213d44ecb5adeed713bae79d606041406df26169c35df63cf972c94be100000000000000000000000000000000084486ebc81878331aab7d6f53ca3c773fda7b181b56a93e5ee0bfa189afbb7fd7a05c5bea35ec1054c0e1ddc2e2dac20000000000000000000000000000000013a3de1d25380c44ca06321151e89ca22210926c1cd4e3c1a9c3aa6c709ab5fdd00f8df19243ce058bc753ccf03424ed000000000000000000000000000000001657dbebf712cbda6f15d1d387c87b3fb9b386d5d754135049728a2a856ba2944c741024131a93c78655fdb7bfe3c80300000000000000000000000000000000068edef3169c58920509ed4e7069229bd8038a45d2ce5773451cc18b396d2838c9539ecb52298a27eebd714afacb907c0000000000000000000000000000000004c5346765a62f2d2e700aadccf747acb3322c250435ce2cf358c08f1e286427cabace052327c4b30135c8482c5c0eb90000000000000000000000000000000008d8c4a16fb9d8800cce987c0eadbb6b3b005c213d44ecb5adeed713bae79d606041406df26169c35df63cf972c94be10000000000000000000000000000000011bc8afe71676e6730702a46ef817060249cd06cd82e6981085012ff6d013aa4470ba3a2c71e13ef653e1e223d1ccfe90000000000000000000000000000000013a3de1d25380c44ca06321151e89ca22210926c1cd4e3c1a9c3aa6c709ab5fdd00f8df19243ce058bc753ccf03424ed000000000000000000000000000000001657dbebf712cbda6f15d1d387c87b3fb9b386d5d754135049728a2a856ba2944c741024131a93c78655fdb7bfe3c80300000000000000000000000000000000137232f722e38e084611ba67d2e28a3b8c73c13f20b6bb4c22141115bd43cdeb555861335f2a75d7cb418eb505341a2f00000000000000000000000000000000153bdd82d3d9b76d1cab9d087654652ab1451f5fef4f449273d81211d88891fc53f131f98e2c3b4cb8c937b7d3a39bf20000000000000000000000000000000008d8c4a16fb9d8800cce987c0eadbb6b3b005c213d44ecb5adeed713bae79d606041406df26169c35df63cf972c94be100000000000000000000000000000000084486ebc81878331aab7d6f53ca3c773fda7b181b56a93e5ee0bfa189afbb7fd7a05c5bea35ec1054c0e1ddc2e2dac20000000000000000000000000000000013a3de1d25380c44ca06321151e89ca22210926c1cd4e3c1a9c3aa6c709ab5fdd00f8df19243ce058bc753ccf03424ed000000000000000000000000000000001657dbebf712cbda6f15d1d387c87b3fb9b386d5d754135049728a2a856ba2944c741024131a93c78655fdb7bfe3c80300000000000000000000000000000000137232f722e38e084611ba67d2e28a3b8c73c13f20b6bb4c22141115bd43cdeb555861335f2a75d7cb418eb505341a2f00000000000000000000000000000000153bdd82d3d9b76d1cab9d087654652ab1451f5fef4f449273d81211d88891fc53f131f98e2c3b4cb8c937b7d3a39bf2";
    let expected =  "0000000000000000000000000000000000000000000000000000000000000001";

    assert!(test_bls381_pairing(
        &input.from_hex::<Vec<u8>>().unwrap(),
        &expected.from_hex::<Vec<u8>>().unwrap(),
    ).unwrap());
}


pub fn test_base_bls381_pairing_8() {
    let input =  "000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d579500000000000000000000000000000000144401f7eb69f6321eae8dad39dbe2cf4ae58e455474701dd9f1b62c85c7536813e84eb4f9def511eb62e5194288728b000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd0000000000000000000000000000000001652a688dbfd63a1c89452335bdaf248c97c9c6e5a3ad5a126577a6b9ab57075b22987ea8697b459611a5ab164f328400000000000000000000000000000000058a37347c5637808632ae6e8f264e8bde14ebb0ae69828f962f51b728321fea57c5a97ab694f7db175efe7a17d36cb6000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d57950000000000000000000000000000000005bd0ff24e15f0682c6d1a09096fca081991bd3f9f10a2a18d3f1c7470e9a2bc0ac3b149b7750aedce9c1ae6bd773820000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd0000000000000000000000000000000001652a688dbfd63a1c89452335bdaf248c97c9c6e5a3ad5a126577a6b9ab57075b22987ea8697b459611a5ab164f328400000000000000000000000000000000058a37347c5637808632ae6e8f264e8bde14ebb0ae69828f962f51b728321fea57c5a97ab694f7db175efe7a17d36cb6000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d579500000000000000000000000000000000144401f7eb69f6321eae8dad39dbe2cf4ae58e455474701dd9f1b62c85c7536813e84eb4f9def511eb62e5194288728b000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd00000000000000000000000000000000189be781abc010602e9262930d8dfdb2d7df81be0de1656554cb5afa3d059f1cc389678008ea84ba23ed5a54e9b07827000000000000000000000000000000001476dab5bd29af19c4e8f947b4255e4b86625fd4451b902fd10180e9ce7ed639c6e65683fabf0824a2a00185e82c3df5000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d57950000000000000000000000000000000005bd0ff24e15f0682c6d1a09096fca081991bd3f9f10a2a18d3f1c7470e9a2bc0ac3b149b7750aedce9c1ae6bd773820000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd00000000000000000000000000000000189be781abc010602e9262930d8dfdb2d7df81be0de1656554cb5afa3d059f1cc389678008ea84ba23ed5a54e9b07827000000000000000000000000000000001476dab5bd29af19c4e8f947b4255e4b86625fd4451b902fd10180e9ce7ed639c6e65683fabf0824a2a00185e82c3df5000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d579500000000000000000000000000000000144401f7eb69f6321eae8dad39dbe2cf4ae58e455474701dd9f1b62c85c7536813e84eb4f9def511eb62e5194288728b000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd0000000000000000000000000000000001652a688dbfd63a1c89452335bdaf248c97c9c6e5a3ad5a126577a6b9ab57075b22987ea8697b459611a5ab164f328400000000000000000000000000000000058a37347c5637808632ae6e8f264e8bde14ebb0ae69828f962f51b728321fea57c5a97ab694f7db175efe7a17d36cb6000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d57950000000000000000000000000000000005bd0ff24e15f0682c6d1a09096fca081991bd3f9f10a2a18d3f1c7470e9a2bc0ac3b149b7750aedce9c1ae6bd773820000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd0000000000000000000000000000000001652a688dbfd63a1c89452335bdaf248c97c9c6e5a3ad5a126577a6b9ab57075b22987ea8697b459611a5ab164f328400000000000000000000000000000000058a37347c5637808632ae6e8f264e8bde14ebb0ae69828f962f51b728321fea57c5a97ab694f7db175efe7a17d36cb6000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d579500000000000000000000000000000000144401f7eb69f6321eae8dad39dbe2cf4ae58e455474701dd9f1b62c85c7536813e84eb4f9def511eb62e5194288728b000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd00000000000000000000000000000000189be781abc010602e9262930d8dfdb2d7df81be0de1656554cb5afa3d059f1cc389678008ea84ba23ed5a54e9b07827000000000000000000000000000000001476dab5bd29af19c4e8f947b4255e4b86625fd4451b902fd10180e9ce7ed639c6e65683fabf0824a2a00185e82c3df5000000000000000000000000000000001555535228eb9a24f460df9894d59aa06fc848a8bf8d6c3b51653b1d85734b3c5a2bece161309bd478d356fa198d57950000000000000000000000000000000005bd0ff24e15f0682c6d1a09096fca081991bd3f9f10a2a18d3f1c7470e9a2bc0ac3b149b7750aedce9c1ae6bd773820000000000000000000000000000000000e619d79792ac685030311a31a21203e5172d2e5d20ecf69a1e64158e7fe903b3695fd15432d3ca35562b5a8bd9cbdc20000000000000000000000000000000012394a621a503d1d92df3306649a6c6979816cabeb8f8d27450ec883c4e75f6f7411f3bfd068dc8dee58cdb8ebbd91bd00000000000000000000000000000000189be781abc010602e9262930d8dfdb2d7df81be0de1656554cb5afa3d059f1cc389678008ea84ba23ed5a54e9b07827000000000000000000000000000000001476dab5bd29af19c4e8f947b4255e4b86625fd4451b902fd10180e9ce7ed639c6e65683fabf0824a2a00185e82c3df5";
    let expected =  "0000000000000000000000000000000000000000000000000000000000000001";

    assert!(test_bls381_pairing(
        &input.from_hex::<Vec<u8>>().unwrap(),
        &expected.from_hex::<Vec<u8>>().unwrap(),
    ).unwrap());
}

#[cfg(test)]
mod test {
    use super::*;
    use std::fs::File;
    use std::io::{self, BufRead};
    use std::path::Path;

    fn run_csv_test<P,F>(filename: P, f : F)
    where P: AsRef<Path>,
          F: Fn(Vec<Vec<u8>>)->TestResult<bool>
    {
        let file = File::open(filename).expect("cannot open file");
        let mut faileds = String::from("");
        let lines = io::BufReader::new(file).lines();

        for (no,line) in lines.into_iter().skip(1).enumerate() {
            let args = line.unwrap()
                .split(",")
                .map(|h| h.from_hex::<Vec<u8>>().unwrap())
                .collect::<Vec<_>>();
            
            match f(args) {
                Ok(false) => faileds.push_str(&format!("[{}->false]",no)),
                Err(err) => faileds.push_str(&format!("[{}->{}]",no,err)),
                _ => {}
            };

        }

        
        assert_eq!(faileds,"");
    }

    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_base_bls381_fp_to_g1() {
        super::test_base_bls381_fp_to_g1();
    }


    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_base_bls381_g1_add() {
        super::test_base_bls381_g1_add();
    }

    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_base_bls381_g1_mul() {
        super::test_base_bls381_g1_mul();
    }    

    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_base_bls381_g2_add() {
        super::test_base_bls381_g2_add();
    }

    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_base_bls381_g2_mul() {
        super::test_base_bls381_g2_mul();
    }

    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_base_bls381_pairing() {
        super::test_base_bls381_pairing_2();
    }

    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_csv_bls381_fp_to_g1() {
        run_csv_test(
            "src/test_utils/eip1962/src/test/test_vectors/eip2537/fp_to_g1.csv",
            |args| super::test_bls381_fp_to_g1(&args[0],&args[1])
        );
    }

    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_csv_bls381_g1_add() {
        run_csv_test(
            "src/test_utils/eip1962/src/test/test_vectors/eip2537/g1_add.csv",
            |args| super::test_bls381_g1_add(&args[0],&args[1])
        );
    }
    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_csv_bls381_g1_mul() {
        run_csv_test(
            "src/test_utils/eip1962/src/test/test_vectors/eip2537/g1_mul.csv",
            |args| super::test_bls381_g1_mul(&args[0],&args[1])
        );
    }
    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_csv_bls381_g2_add() {
        run_csv_test(
            "src/test_utils/eip1962/src/test/test_vectors/eip2537/g2_add.csv",
            |args| super::test_bls381_g2_add(&args[0],&args[1])
        );
    }
    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_csv_bls381_g2_mul() {
        run_csv_test(
            "src/test_utils/eip1962/src/test/test_vectors/eip2537/g2_mul.csv",
            |args| super::test_bls381_g2_mul(&args[0],&args[1])
        );
    }
    #[test]
    #[cfg(feature = "bls381g2")]
    fn test_csv_bls381_pairing() {
        run_csv_test(
            "src/test_utils/eip1962/src/test/test_vectors/eip2537/pairing.csv",
            |args| super::test_bls381_pairing(&args[0],&args[1])
        );
    }
}
